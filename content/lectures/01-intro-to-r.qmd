---
title: "01-intro-to-r"
author: "Professor Shannon Ellis"
date: "2023-01-12"

format:
  html: 
    output-file: 01-intro-to-r.html
  revealjs:
    output-file: 01-intro-to-r-slides.html
    slide-number: true
    chalkboard: false 
    preview-links: auto
    logo: images/cogs137-logo-hex.png
    css: slides.css
    footer: <https://cogs137.github.io/website/>
    execute:
     echo: true
---

# Introduction to R {background-color="#92A86A"}

```{r echo=FALSE, message=FALSE, warning=FALSE}
library(tidyverse)
library(emo)
library(DT)

# Set dpi and height for images
knitr::opts_chunk$set(fig.height = 2.65, dpi = 300, echo=TRUE) 
htmltools::tagList(rmarkdown::html_dependency_font_awesome())

options(gargle_oauth_email = "sellis@ucsd.edu")
```

## \[ad\] CALPIRG {.scrollable}

[**APPLY NOW: Volunteer or Intern to fight plastic pollution or turn out the vote on campus!**](https://urldefense.com/v3/__https://forms.gle/RJ2c7S4qPtQhmijM8__;!!Mih3wA!A96o4NZkvPhLgv8iTEY8C38QUYn8jxIWdKl8OhRGFRbPcDCMoIVIOqxmnoXnaF9WDCNpg2JLJ-zLiA$)

[CALPIRG Students](https://urldefense.com/v3/__https://calpirgstudents.org/__;!!Mih3wA!A96o4NZkvPhLgv8iTEY8C38QUYn8jxIWdKl8OhRGFRbPcDCMoIVIOqxmnoXnaF9WDCNpg2LcNacg3Q$) is a student organization on campus that works to protect the environment, address food insecurity, and promote civic engagement. We helped nearly 10,000 students register to vote in California and got the UCs to release new policy to phase out single-use plastics to protect our oceans! [Get involved to protect our oceans!](https://urldefense.com/v3/__https://docs.google.com/forms/d/e/1FAIpQLSeHs-qFNAiWePEpqPNBZgN67sy4qfXTrqgq-zwfCtTi5W2mFQ/viewform?usp=sf_link__;!!Mih3wA!A96o4NZkvPhLgv8iTEY8C38QUYn8jxIWdKl8OhRGFRbPcDCMoIVIOqxmnoXnaF9WDCNpg2KgJtA5IA$)

![](images/01/calpirg_wi22.png)

This Winter, we're working to protect our oceans. They give us food, provide most of the oxygen we breathe, and are home to awesome biodiversity like whales and sea turtles, but our oceans are at risk from things like overfishing, oil drilling, and pollution. **That's why we're calling on Governor Newsom to increase protections for marine areas in California!**

We're also working on campaigns addressing hunger & homelessness, fighting plastic pollution, and promoting voter participation.

As a volunteer or intern with CALPIRG you can:

-   Build grassroots support
-   Work with the media and help organize press conferences with experts and elected officials
-   Lobby elected officials
-   Plan big events like rallies or a benefit concert
-   Learn key nonprofit management and fundraising skills

[**Learn skills, build your resume, and work with issues that matter. Apply today.**](https://urldefense.com/v3/__https://forms.gle/RJ2c7S4qPtQhmijM8__;!!Mih3wA!A96o4NZkvPhLgv8iTEY8C38QUYn8jxIWdKl8OhRGFRbPcDCMoIVIOqxmnoXnaF9WDCNpg2JLJ-zLiA$)

## Course Announcements

**Due Dates**:

-   Student survey "due" Sunday (1/15) 11:59 PM
-   **Lab 01** due Friday 11:59 PM
-   Lecture Participation survey "due" after class (both Tu and today's lectures)

**Update**: Lab will be podcast but restricted to UCSD students and will not be archived.

## Agenda

1.  Variables
2.  Operators
3.  Data in R
4.  RMarkdown

# Variables & Assignment {background-color="#92A86A"}

## Variables & Assignment {.scrollable}

Variables are how we store information so that we can access it later.

. . .

Variables are created and stored using the assignment operator `<-` [^1]

[^1]: Other programming languages use `=` for assignment. R *also* uses that for assignment, but it is more typical to see `<-` in R code, so we'll stick with that.

```{r}
first_variable <- 3
```

The above stores the value 3 in the variable `first_variable`

. . .

This means that if we ever want to reference the information stored in that variable later, we can "call" (mean, type in our code) the variable's name:

```{r}
first_variable
```

## Variable Type

-   Every variable you create in R will be of a specific type.

. . .

-   The type of the variable is determined dynamically on assignment.

. . .

-   Determining the type of a variable with `class()`:

```{r}
class(first_variable)
```

## Basic Variable Types {.scrollable}

| Variable Type | Explanation                       | Example                                     |
|-----------------------------|-------------------------|------------------|
| character     | stores a string                   | `"cogs137"`, `"hi!"`                        |
| numeric       | stores whole numbers and decimals | `9`, `9.29`                                 |
| integer       | specifies integer                 | `9L` (the `L` specifies this is an integer) |
| logical       | Booleans                          | `TRUE`, `FALSE`                             |
| list          | store multiple elements           | `list(7, "a", TRUE)`                        |

::: aside
There are many more. We'll get to some but not all in this course.
:::

## logical & character {.scrollable}

**logical** - Boolean values `TRUE` and `FALSE`

```{r}
class(TRUE)
```

. . .

**character** - character strings

```{r}
class("hello")
class('students') # equivalent...but we'll use double quotes!
```

. . .

## numeric: double & integer

**double** - floating point numerical values (default numerical type)

```{r}
class(1.335)
class(7)
```

. . .

**integer** - integer numerical values (indicated with an `L`)

```{r}
class(7L)

```

. . .

## lists

So far, every variable has been an .ocean\[atomic vector\], meaning it only stores a single piece of information.

. . .

**Lists** are 1d objects that can contain any combination of R objects

::: columns
::: {.column width="50%"}
```{r}
mylist <- list("A", 7L, TRUE, 18.4)
mylist
```
:::

::: {.column width="50%"}
```{r}
str(mylist)
```
:::
:::

## Your Turn

Define variables of each of the following types: charachter, numeric, integer, logical, list

::: aside
Put a <font color="#32cb31">green</font> sticky on the front of your computer when you're done. Put a <font color="#ff65a3">pink</font> if you want help/have a question.
:::

## Functions {.scrollable}

-   `class()` was our first function...but we'll show a few more.

. . .

-   Functions are (most often) verbs, followed by what they will be applied to in parentheses.

. . .

Functions are:

-   available from base R
-   available from packages you import
-   defined by you

. . .

We'll start by getting comfortable with available functions, but in a few days, you'll learn how to write your own!

## Helpful Functions

::: columns
::: {.column width="50%"}
-   `class()` - determine high-level variable type

```{r}
class(mylist)
```

-   `length()`- determine how long an object is

```{r}
# contains 4 elements
length(mylist)
```
:::

::: {.column width="40%"}
-   `str()` - display the structure of an R object

```{r}
str(mylist)
```
:::
:::

## Coercion

R is a dynamically typed language -- it will happily convert between the various types without complaint.

```{r}
c(1, "Hello")
c(FALSE, 3L)
c(1.2, 3L)
```

## Missing Values

R uses `NA` to represent missing values in its data structures.

```{r}
class(NA)
```

. . .

### Other Special Values

`NaN` \| Not a number

`Inf` \| Positive infinity

`-Inf` \| Negative infinity

## Activity

[What is the type of the following vectors? Explain why they have that type.]{style="background-color: ##e94f58"}

-   `c(1, NA+1L, "C")`
-   `c(1L / 0, NA)`
-   `c(1:3, 5)`
-   `c(3L, NaN+1L)`
-   `c(NA, TRUE)`

::: aside
Put a <font color="#32cb31">green</font> sticky on the front of your computer when you're done. Put a <font color="#ff65a3">pink</font> if you want help/have a question.
:::

# Operators {background-color="#92A86A"}

## Operators

At its simplest, R is a calculator. To carry out mathematical operations, R uses **operators**.

## Arithmetic Operators

| Operator    | Description                   |
|-------------|-------------------------------|
| `+`         | addition                      |
| `-`         | subtraction                   |
| `*`         | multiplication                |
| `/`         | division                      |
| `^` or `**` | exponentiation                |
| `x %% y`    | modulus (x mod y) `9%%2` is 1 |
| `x %/% y`   | integer division `9%/%2` is 4 |

## Arithmetic Operators: Examples

```{r}
7 + 6  
2 - 3
4 * 2
9 / 2
```

## Reminder

Output can be stored to a variable

```{r}
my_addition <- 7 + 6
```

. . .

```{r}
my_addition
```

## Comparison Operators

These operators return a Boolean.

| Operator | Description              |
|----------|--------------------------|
| `<`      | less than                |
| `<=`     | less than or equal to    |
| `>`      | greater than             |
| `>=`     | greater than or equal to |
| `==`     | exactly equal to         |
| `!=`     | not equal to             |

## Comparison Operators: Examples

```{r}
4 < 12
4 >= 3
6 == 6
7 != 6
```

## Your Turn

Use arithmetic and comparison operators to store the value 30 in the variable `var_30` and `TRUE` in the variable `true_var`.

::: aside
Put a <font color="#32cb31">green</font> sticky on the front of your computer when you're done. Put a <font color="#ff65a3">pink</font> if you want help/have a question.
:::

# R Packages {background-color="#92A86A"}

## Packages

-   Packages are installed with the `install.packages` function and loaded with the `library` function, once per session:

```{r eval=FALSE}
install.packages("package_name")
library(package_name)
```

. . .

In this course, most packages we'll use have been installed for you already on datahub, so you will only have to load the package in (using `library`).

# Data "sets"

## Data "sets" in R {.scrollable}

-   "set" is in quotation marks because it is not a formal data class

-   A tidy data "set" can be one of the following types:

    -   `tibble`
    -   `data.frame`

-   We'll often work with `tibble`s:

    -   `readr` package (e.g. `read_csv` function) loads data as a `tibble` by default
    -   `tibble`s are part of the tidyverse, so they work well with other packages we are using
    -   they make minimal assumptions about your data, so are less likely to cause hard to track bugs in your code

## Data frames {.scrollable}

-   A data frame is the most commonly used data structure in R, they are list of equal length vectors (usually atomic, but can be generic). Each vector is treated as a column and elements of the vectors as rows.

-   A tibble is a type of data frame that ... makes your life (i.e. data analysis) easier.

-   Most often a data frame will be constructed by reading in from a file, but we can create them from scratch.

```{r}
df <- tibble(x = 1:3, y = c("a", "b", "c"))
class(df)
glimpse(df)
```

## Data frames (cont.) {.scrollable}

```{r}
attributes(df)
```

. . .

Columns (variables) in data frames are accessed with `$`:

```{r eval=FALSE}
dataframe$var_name
```

. . .

```{r}
class(df$x)  # access variable type for column
class(df$y)  
```

## Variable Types {.scrollable}

Data stored in columns can include different *kinds* of information...which would require a different *type* (`class`) of variable to be used in R.

::: columns
::: {.column width="50%"}
![](images/01/continuous_discrete.png)
:::

::: {.column width="50%"}
R Data Types:

-   **Continuous**: numeric, integer
-   **Discrete**: factors (we haven't talked about these yet, but will today!)
:::
:::

::: aside
Artwork by [\@allison_horst](https://github.com/allisonhorst/stats-illustrations/) <a href="https://twitter.com/allison_horst" title="allison_horst"><i class="fa fa-twitter"></i></a>
:::

## Variable Types (cont.) {.scrollable}

Sometimes data are non-numeric and store words. Even when that is the case, the data can be conveying different information.

::: columns
::: {.column width="50%"}
![](images/01/nominal_ordinal_binary.png)
:::

::: {.column width="50%"}
R Data Types:

-   **Nominal**: character
-   **Ordinal**: factors
-   **Binary**: logical OR numeric OR factors `r emo::ji("munch")`
:::
:::

::: aside
Artwork by [\@allison_horst](https://github.com/allisonhorst/stats-illustrations/) <a href="https://twitter.com/allison_horst" title="allison_horst"><i class="fa fa-twitter"></i></a>
:::

## Example: Cat lovers {.scrollable}

A survey asked respondents their name and number of cats. The instructions said to enter the number of cats as a numerical value.

. . .

[`r emo::ji("police_car_light")` There is code ahead that we're not going to discuss in detail today, *but* we will in coming lectures.]{style="background-color: ##e94f58"}

```{r message=FALSE}
cat_lovers <- read_csv("data/cat-lovers.csv")
```

## The Data {.scrollable}

```{r message=FALSE}
cat_lovers |>
  datatable()
```

## The Question {.scrollable}

[How many respondents have a below average number of cats?]{style="background-color: #ADD8E6"}

. . .

**Giving it a first shot...**

```{r}
cat_lovers |>
  summarise(mean = mean(number_of_cats))
```

. . .

[`r emo::ji("idea")` maybe there is missing data in the `number_of_cats` column!]{style="background-color: #ADD8E6"}

**Oh why will you *still* not work??!!**

```{r}
cat_lovers |>
  summarise(mean_cats = mean(number_of_cats, na.rm = TRUE))
```

. . .

[`r emo::ji("idea")`What is the **type** of the `number_of_cats` variable?]{style="background-color: #ADD8E6"}

## Take a breath and look at your data

. . .

```{r}
glimpse(cat_lovers)
```

## Let's take another look {.scrollable}

```{r echo=FALSE}
cat_lovers |>
  datatable()
```

## Sometimes you need to babysit your respondents

```{r}
cat_lovers |>
  mutate(number_of_cats = case_when(
    name == "Ginger Clark" ~ 2,
    name == "Doug Bass"    ~ 3,
    TRUE                   ~ as.numeric(number_of_cats))) |>
  summarise(mean_cats = mean(number_of_cats))
```

## Always respect (& check!) data types

```{r}
cat_lovers |>
  mutate(number_of_cats = case_when(
         name == "Ginger Clark" ~ "2",
         name == "Doug Bass"    ~ "3",
         TRUE                   ~ number_of_cats),
         number_of_cats = as.numeric(number_of_cats)) |>
  summarise(mean_cats = mean(number_of_cats))
```

## Now that we know what we're doing...

```{r}
cat_lovers <- cat_lovers |>
  mutate(number_of_cats = case_when(
         name == "Ginger Clark" ~ "2",
         name == "Doug Bass"    ~ "3",
         TRUE                   ~ number_of_cats),
         number_of_cats = as.numeric(number_of_cats))
```

## Moral of the story

-   If your data does not behave how you expect it to, type coercion upon reading in the data might be the reason.

-   Go in and investigate your data, apply the fix, *save your data*, live happily ever after.

## Working with tibbles in pipelines

```{r}
mean_cats <- cat_lovers |>
  summarise(mean_cats = mean(number_of_cats))

cat_lovers |>
  filter(number_of_cats < mean_cats) |>
  nrow()
```

. . .

[`r emo::ji("question")` Do you believe this number? Why, why not?]{style="background-color: #ADD8E6"}

## A result of a pipeline is always a tibble

```{r}
mean_cats
class(mean_cats)
```

# R Markdown

## R Markdown: tour

<center>\[DEMO\]</center>

Before we move on...

[<i class="fa fa-user" aria-hidden="true"></i>   What is the Bechdel test?]{style="background-color: #ADD8E6"}

. . .

The Bechdel test asks whether a work of fiction features at least two women who talk to each other about something other than a man, and there must be two women named characters.

. . .

Concepts introduced:

-   Knitting documents
-   R Markdown and (some) R syntax

## Your Turn

1.  Navigate to the demo URL (on Canvas)
2.  Accept the "assignment" (this is NOT graded)
3.  Clone the repo
4.  Edit the document
5.  Knit the document
6.  Push your changes

Put a <font color="#32cb31">green</font> sticky on the front of your computer when you're done. Put a <font color="#ff65a3">pink</font> if you want help/have a question.

# Recap {background-color="#92A86A"}

## Recap {.scrollable}

-   Always best to think of data as part of a tibble
    -   This plays nicely with the `tidyverse` as well
    -   Rows are observations, columns are variables
-   Be careful about data types / classes
    -   Sometimes `R` makes silly assumptions about your data class
        -   Using `tibble`s help, but it might not solve all issues
        -   Think about your data in context, e.g. 0/1 variable is most likely a `factor`
    -   If a plot/output is not behaving the way you expect, first investigate the data class
    -   If you are absolutely sure of a data class, over-write it in your tibble so that you don't need to keep having to keep track of it
        -   `mutate` the variable with the correct class
-   What are the components of an R Markdown file?
-   What are atomic vectors?
-   Do I know how to determine the class/type of a variable?
-   Can I define atomic vectors, vectors, and lists?
-   Can I explain dynamic typing?
-   Can I operate on variables and values using...
    -   arithmetic operators?
    -   comparison operators?
-   What is the difference between installing and loading a package?
