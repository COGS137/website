{
  "hash": "8bd7e5457959275d984ca918fc62fa7c",
  "result": {
    "markdown": "---\ntitle: \"01-intro-to-r\"\nauthor: \"Professor Shannon Ellis\"\ndate: \"2023-01-12\"\n\nformat:\n  html: \n    output-file: 01-intro-to-r.html\n  revealjs:\n    output-file: 01-intro-to-r-slides.html\n    slide-number: true\n    chalkboard: false \n    preview-links: auto\n    logo: images/cogs137-logo-hex.png\n    css: slides.css\n    footer: <https://cogs137.github.io/website/>\n    execute:\n     echo: true\n---\n\n\n\n# Introduction to R  {background-color=\"#92A86A\"}\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n:::\n:::\n\n\n\n## Course Announcements\n\n**Due Dates**:\n\n- **Lab 01** due Friday 11:59 PM\n\n## Agenda\n\n1. \n\n# Variables & Assignment {background-color=\"#92A86A\"}\n\n## Variables & Assignment {.scrollable}\n\nVariables are how we store information so that we can access it later.\n\n. . .\n\nVariables are created and stored using the assignment operator `<-` [^1]\n\n[^1]: Other programming languages use `=` for assignment. R *also* uses that for assignment, but it is more typical to see `<-` in R code, so we'll stick with that.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfirst_variable <- 3\n```\n:::\n\n\n\nThe above stores the value 3 in the variable `first_variable`\n\n. . .\n\nThis means that if we ever want to reference the information stored in that variable later, we can \"call\" (mean, type in our code) the variable's name:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfirst_variable\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n\n\n## Variable Type\n\n- Every variable you create in R will be of a specific type.\n\n. . .\n\n- The type of the variable is determined dynamically on assignment.\n\n. . .\n\n- Determining the type of a variable with `class()`: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(first_variable)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\n\n\n\n## Basic Variable Types {.scrollable}\n\n| Variable Type | Explanation | Example|\n|---------------|-------------|--------|\n|character | stores a string | `\"cogs137\"`, `\"hi!\"`|\n|numeric | stores whole numbers and decimals | `9`, `9.29`|\n|integer | specifies integer | `9L` (the `L` specifies this is an integer)|\n|logical | Booleans | `TRUE`, `FALSE`|\n|list    | store multiple elements | `list(7, \"a\", TRUE)`\n\n::: aside\nThere are many more. We'll get to some but not all in this course.\n:::\n\n\n## logical & character {.scrollable}\n\n**logical** - Boolean values `TRUE` and `FALSE`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n:::\n\n\n\n. . .\n\n**character** - character strings\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(\"hello\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\nclass('students') # equivalent...but we'll use double quotes!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n\n. . .\n\n\n## numeric: double & integer\n\n**double** - floating point numerical values (default numerical type)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(1.335)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nclass(7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\n\n\n. . .\n\n\n**integer** - integer numerical values (indicated with an `L`)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(7L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n:::\n\n\n\n. . .\n\n## lists\n\nSo far, every variable has been an .ocean[atomic vector], meaning it only stores a single piece of information.\n\n. . .\n\n**Lists** are 1d objects that can contain any combination of R objects\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmylist <- list(\"A\", 7L, TRUE, 18.4)\nmylist\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"A\"\n\n[[2]]\n[1] 7\n\n[[3]]\n[1] TRUE\n\n[[4]]\n[1] 18.4\n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(mylist)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 4\n $ : chr \"A\"\n $ : int 7\n $ : logi TRUE\n $ : num 18.4\n```\n:::\n:::\n\n\n:::\n:::\n\n## Your Turn\n\nDefine variables of each of the following types: charachter, numeric, integer, logical, list\n\n\n::: aside\nPut a <font color=\"#32cb31\">green</font> sticky on the front of your computer when you're done. Put a <font color=\"#ff65a3\">pink</font> if you want help/have a question.\n:::\n\n## Functions {.scrollable}\n\n- `class()` was our first function...but we'll show a few more.\n\n. . .\n\n- Functions are (most often) verbs, followed by what they will be applied to in parentheses.\n\n. . .\n\nFunctions are:\n\n- available from base R\n- available from packages you import\n- defined by you\n\n. . .\n\n\nWe'll start by getting comfortable with available functions, but in a few days, you'll learn how to write your own! \n\n## Helpful Functions\n\n::: columns\n::: {.column width=\"50%\"}\n\n- `class()` - determine high-level variable type\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(mylist)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"list\"\n```\n:::\n:::\n\n\n\n- `length()`- determine how long an object is\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# contains 4 elements\nlength(mylist)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n- `str()` - display the structure of an R object\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(mylist)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 4\n $ : chr \"A\"\n $ : int 7\n $ : logi TRUE\n $ : num 18.4\n```\n:::\n:::\n\n\n:::\n:::\n\n## Coercion\n\nR is a dynamically typed language -- it will happily convert between the various types without complaint.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1, \"Hello\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\"     \"Hello\"\n```\n:::\n\n```{.r .cell-code}\nc(FALSE, 3L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 3\n```\n:::\n\n```{.r .cell-code}\nc(1.2, 3L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.2 3.0\n```\n:::\n:::\n\n\n\n\n## Missing Values\n\nR uses `NA` to represent missing values in its data structures.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(NA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n:::\n\n\n\n. . .\n\n### Other Special Values\n\n`NaN` | Not a number\n\n`Inf` | Positive infinity\n\n`-Inf` | Negative infinity\n\n\n## Activity\n\n[What is the type of the following vectors? Explain why they have that type.]{style=\"background-color: ##e94f58\"}\n\n* `c(1, NA+1L, \"C\")`\n* `c(1L / 0, NA)`\n* `c(1:3, 5)`\n* `c(3L, NaN+1L)`\n* `c(NA, TRUE)`\n\n::: aside\nPut a <font color=\"#32cb31\">green</font> sticky on the front of your computer when you're done. Put a <font color=\"#ff65a3\">pink</font> if you want help/have a question.\n:::\n\n# Operators   {background-color=\"#92A86A\"}\n\n## Operators\n\nAt its simplest, R is a calculator. To carry out mathematical operations, R uses **operators**.\n\n\n## Arithmetic Operators\n\n|Operator | Description |\n|---------|-------------|\n| `+` | addition|\n| `-`\t| subtraction|\n| `*` |\tmultiplication|\n| `/`\t| division|\n| `^` or `**` |\texponentiation|\n| `x %% y` |\tmodulus (x mod y) `9%%2` is 1|\n| `x %/% y` |\tinteger division `9%/%2` is 4|\n\n\n## Arithmetic Operators: Examples\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n7 + 6  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 13\n```\n:::\n\n```{.r .cell-code}\n2 - 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -1\n```\n:::\n\n```{.r .cell-code}\n4 * 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\n9 / 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.5\n```\n:::\n:::\n\n\n\n## Reminder\n\nOutput can be stored to a variable\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_addition <- 7 + 6\n```\n:::\n\n\n\n. . .\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_addition\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 13\n```\n:::\n:::\n\n\n\n\n## Comparison Operators\n\nThese operators return a Boolean.\n\n|Operator | Description |\n|---------|-------------|\n| `<`\t | less than |\n| `<=` | \tless than or equal to |\n| `>`  | \tgreater than |\n| `>=` | \tgreater than or equal to |\n| `==` | \texactly equal to |\n| `!=` | \tnot equal to | \n\n\n## Comparison Operators: Examples\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n4 < 12\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n4 >= 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n6 == 6\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n7 != 6\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n\n\n## Your Turn\n\nUse arithmetic and comparison operators to store the value 30 in the variable `var_30`\nand `TRUE` in the variable `true_var`.\n\n::: aside\nPut a <font color=\"#32cb31\">green</font> sticky on the front of your computer when you're done. Put a <font color=\"#ff65a3\">pink</font> if you want help/have a question.\n:::\n\n# R Packages  {background-color=\"#92A86A\"}\n\n## Packages\n\n- Packages are installed with the `install.packages` function and loaded with the `library` function, once per session:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"package_name\")\nlibrary(package_name)\n```\n:::\n\n\n\n. . .\n\n\nIn this course, most packages we'll use have been installed for you already on datahub, so you will only have to load the package in (using `library`).\n\n\n# Data \"sets\"\n\n\n## Data \"sets\" in R {.scrollable}\n\n- \"set\" is in quotation marks because it is not a formal data class\n\n- A tidy data \"set\" can be one of the following types:\n    + `tibble`\n    + `data.frame`\n\n- We'll often work with `tibble`s:\n    + `readr` package (e.g. `read_csv` function) loads data as a `tibble` by default\n    + `tibble`s are part of the tidyverse, so they work well with other packages we are using\n    + they make minimal assumptions about your data, so are less likely to cause hard to track bugs in your code\n\n\n## Data frames {.scrollable}\n\n- A data frame is the most commonly used data structure in R, they are list of equal length vectors (usually atomic, but can be generic). Each vector is treated as a column and elements of the vectors as rows.\n\n- A tibble is a type of data frame that ... makes your life (i.e. data analysis) easier.\n\n- Most often a data frame will be constructed by reading in from a file, but we can create them from scratch.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(x = 1:3, y = c(\"a\", \"b\", \"c\"))\nclass(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n\n```{.r .cell-code}\nglimpse(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 3\nColumns: 2\n$ x <int> 1, 2, 3\n$ y <chr> \"a\", \"b\", \"c\"\n```\n:::\n:::\n\n\n\n## Data frames (cont.) {.scrollable}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$class\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n$row.names\n[1] 1 2 3\n\n$names\n[1] \"x\" \"y\"\n```\n:::\n:::\n\n\n\n. . .\n\nColumns (variables) in data frames are accessed with `$`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataframe$var_name\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(df$x)  # access variable type for column\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\nclass(df$y)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n\n\n## Variable Types {.scrollable}\n\nData stored in columns can include different *kinds* of information...which would require a different *type* (`class`) of variable to be used in R.\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/01/continuous_discrete.png)\n:::\n\n::: {.column width=\"50%\"}\n\nR Data Types:\n\n  + **Continuous**: numeric, integer\n  + **Discrete**: factors (we haven't talked about these yet, but will today!)\n:::\n:::\n\n::: aside\nArtwork by [@allison_horst](https://github.com/allisonhorst/stats-illustrations/) <a href=\"https://twitter.com/allison_horst\" title=\"allison_horst\"><i class=\"fa fa-twitter\"></i></a>\n:::\n\n\n## Variable Types (cont.) {.scrollable}\n\nSometimes data are non-numeric and store words. Even when that is the case, the data can be conveying different information.\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/01/nominal_ordinal_binary.png)\n:::\n\n::: {.column width=\"50%\"}\nR Data Types:\n\n  + **Nominal**: character\n  + **Ordinal**: factors\n  + **Binary**: logical OR numeric OR factors 😱\n:::\n:::\n\n::: aside\nArtwork by [@allison_horst](https://github.com/allisonhorst/stats-illustrations/) <a href=\"https://twitter.com/allison_horst\" title=\"allison_horst\"><i class=\"fa fa-twitter\"></i></a>\n:::\n\n\n## Example: Cat lovers {.scrollable}\n\nA survey asked respondents their name and number of cats. The instructions said to enter the number of cats as a numerical value.\n\n. . .\n\n\n[🚨 There is code ahead that we're not going to discuss in detail today, *but* we will in coming lectures.]{style=\"background-color: ##e94f58\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat_lovers <- read_csv(\"data/cat-lovers.csv\")\n```\n:::\n\n\n\n\n## The Data {.scrollable}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat_lovers |>\n  datatable()\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-ff0287bf66b5756bf9cf\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-ff0287bf66b5756bf9cf\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\"],[\"Bernice Warren\",\"Woodrow Stone\",\"Willie Bass\",\"Tyrone Estrada\",\"Alex Daniels\",\"Jane Bates\",\"Latoya Simpson\",\"Darin Woods\",\"Agnes Cobb\",\"Tabitha Grant\",\"Perry Cross\",\"Wanda Silva\",\"Alicia Sims\",\"Emily Logan\",\"Woodrow Elliott\",\"Brent Copeland\",\"Pedro Carlson\",\"Patsy Luna\",\"Brett Robbins\",\"Oliver George\",\"Calvin Perry\",\"Lora Gutierrez\",\"Charlotte Sparks\",\"Earl Mack\",\"Leslie Wade\",\"Santiago Barker\",\"Jose Bell\",\"Lynda Smith\",\"Bradford Marshall\",\"Irving Miller\",\"Caroline Simpson\",\"Frances Welch\",\"Melba Jenkins\",\"Veronica Morales\",\"Juanita Cunningham\",\"Maurice Howard\",\"Teri Pierce\",\"Phil Franklin\",\"Jan Zimmerman\",\"Leslie Price\",\"Bessie Patterson\",\"Ethel Wolfe\",\"Naomi Wright\",\"Sadie Frank\",\"Lonnie Cannon\",\"Tony Garcia\",\"Darla Newton\",\"Ginger Clark\",\"Lionel Campbell\",\"Florence Klein\",\"Harriet Leonard\",\"Terrence Harrington\",\"Travis Garner\",\"Doug Bass\",\"Pat Norris\",\"Dawn Young\",\"Shari Alvarez\",\"Tamara Robinson\",\"Megan Morgan\",\"Kara Obrien\"],[\"0\",\"0\",\"1\",\"3\",\"3\",\"2\",\"1\",\"1\",\"0\",\"0\",\"0\",\"0\",\"1\",\"3\",\"3\",\"2\",\"1\",\"1\",\"0\",\"0\",\"1\",\"1\",\"0\",\"0\",\"4\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"3\",\"3\",\"2\",\"1\",\"1.5 - honestly I think one of my cats is half human\",\"0\",\"0\",\"0\",\"0\",\"1\",\"three\",\"1\",\"1\",\"1\",\"0\",\"0\",\"2\"],[\"left\",\"left\",\"left\",\"left\",\"left\",\"left\",\"left\",\"left\",\"left\",\"left\",\"left\",\"left\",\"left\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"ambidextrous\",\"ambidextrous\",\"ambidextrous\",\"ambidextrous\",\"ambidextrous\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>name<\\/th>\\n      <th>number_of_cats<\\/th>\\n      <th>handedness<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n\n## The Question {.scrollable}\n\n[How many respondents have a below average number of cats?]{style=\"background-color: #ADD8E6\"}\n\n\n. . .\n\n\n**Giving it a first shot...**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat_lovers |>\n  summarise(mean = mean(number_of_cats))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n   mean\n  <dbl>\n1    NA\n```\n:::\n:::\n\n\n\n. . .\n\n\n[💡 maybe there is missing data in the `number_of_cats` column!]{style=\"background-color: #ADD8E6\"}\n\n\n**Oh why will you *still* not work??!!**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat_lovers |>\n  summarise(mean_cats = mean(number_of_cats, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  mean_cats\n      <dbl>\n1        NA\n```\n:::\n:::\n\n\n\n. . .\n\n\n[💡What is the **type** of the `number_of_cats` variable?]{style=\"background-color: #ADD8E6\"}\n\n\n## Take a breath and look at your data\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(cat_lovers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 60\nColumns: 3\n$ name           <chr> \"Bernice Warren\", \"Woodrow Stone\", \"Willie Bass\", \"Tyro…\n$ number_of_cats <chr> \"0\", \"0\", \"1\", \"3\", \"3\", \"2\", \"1\", \"1\", \"0\", \"0\", \"0\", …\n$ handedness     <chr> \"left\", \"left\", \"left\", \"left\", \"left\", \"left\", \"left\",…\n```\n:::\n:::\n\n\n\n\n## Let's take another look {.scrollable}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-d2dfbe6bb02532145ed9\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-d2dfbe6bb02532145ed9\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\"],[\"Bernice Warren\",\"Woodrow Stone\",\"Willie Bass\",\"Tyrone Estrada\",\"Alex Daniels\",\"Jane Bates\",\"Latoya Simpson\",\"Darin Woods\",\"Agnes Cobb\",\"Tabitha Grant\",\"Perry Cross\",\"Wanda Silva\",\"Alicia Sims\",\"Emily Logan\",\"Woodrow Elliott\",\"Brent Copeland\",\"Pedro Carlson\",\"Patsy Luna\",\"Brett Robbins\",\"Oliver George\",\"Calvin Perry\",\"Lora Gutierrez\",\"Charlotte Sparks\",\"Earl Mack\",\"Leslie Wade\",\"Santiago Barker\",\"Jose Bell\",\"Lynda Smith\",\"Bradford Marshall\",\"Irving Miller\",\"Caroline Simpson\",\"Frances Welch\",\"Melba Jenkins\",\"Veronica Morales\",\"Juanita Cunningham\",\"Maurice Howard\",\"Teri Pierce\",\"Phil Franklin\",\"Jan Zimmerman\",\"Leslie Price\",\"Bessie Patterson\",\"Ethel Wolfe\",\"Naomi Wright\",\"Sadie Frank\",\"Lonnie Cannon\",\"Tony Garcia\",\"Darla Newton\",\"Ginger Clark\",\"Lionel Campbell\",\"Florence Klein\",\"Harriet Leonard\",\"Terrence Harrington\",\"Travis Garner\",\"Doug Bass\",\"Pat Norris\",\"Dawn Young\",\"Shari Alvarez\",\"Tamara Robinson\",\"Megan Morgan\",\"Kara Obrien\"],[\"0\",\"0\",\"1\",\"3\",\"3\",\"2\",\"1\",\"1\",\"0\",\"0\",\"0\",\"0\",\"1\",\"3\",\"3\",\"2\",\"1\",\"1\",\"0\",\"0\",\"1\",\"1\",\"0\",\"0\",\"4\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"3\",\"3\",\"2\",\"1\",\"1.5 - honestly I think one of my cats is half human\",\"0\",\"0\",\"0\",\"0\",\"1\",\"three\",\"1\",\"1\",\"1\",\"0\",\"0\",\"2\"],[\"left\",\"left\",\"left\",\"left\",\"left\",\"left\",\"left\",\"left\",\"left\",\"left\",\"left\",\"left\",\"left\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"ambidextrous\",\"ambidextrous\",\"ambidextrous\",\"ambidextrous\",\"ambidextrous\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>name<\\/th>\\n      <th>number_of_cats<\\/th>\\n      <th>handedness<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n## Sometimes you need to babysit your respondents\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat_lovers |>\n  mutate(number_of_cats = case_when(\n    name == \"Ginger Clark\" ~ 2,\n    name == \"Doug Bass\"    ~ 3,\n    TRUE                   ~ as.numeric(number_of_cats))) |>\n  summarise(mean_cats = mean(number_of_cats))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  mean_cats\n      <dbl>\n1     0.817\n```\n:::\n:::\n\n\n\n\n## Always respect (& check!) data types\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat_lovers |>\n  mutate(number_of_cats = case_when(\n         name == \"Ginger Clark\" ~ \"2\",\n         name == \"Doug Bass\"    ~ \"3\",\n         TRUE                   ~ number_of_cats),\n         number_of_cats = as.numeric(number_of_cats)) |>\n  summarise(mean_cats = mean(number_of_cats))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  mean_cats\n      <dbl>\n1     0.817\n```\n:::\n:::\n\n\n\n\n## Now that we know what we're doing...\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat_lovers <- cat_lovers |>\n  mutate(number_of_cats = case_when(\n         name == \"Ginger Clark\" ~ \"2\",\n         name == \"Doug Bass\"    ~ \"3\",\n         TRUE                   ~ number_of_cats),\n         number_of_cats = as.numeric(number_of_cats))\n```\n:::\n\n\n\n## Moral of the story\n\n- If your data does not behave how you expect it to, type coercion upon reading in the data might be the reason.\n\n- Go in and investigate your data, apply the fix, *save your data*, live happily ever after.\n\n## Working with tibbles in pipelines\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_cats <- cat_lovers |>\n  summarise(mean_cats = mean(number_of_cats))\n\ncat_lovers |>\n  filter(number_of_cats < mean_cats) |>\n  nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 60\n```\n:::\n:::\n\n\n\n. . .\n\n\n\n[❓ Do you believe this number? Why, why not?]{style=\"background-color: #ADD8E6\"}\n\n\n## A result of a pipeline is always a tibble\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_cats\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  mean_cats\n      <dbl>\n1     0.817\n```\n:::\n\n```{.r .cell-code}\nclass(mean_cats)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n:::\n\n\n\n# Factors {background-color=\"#92A86A\"}\n\n## Factors {.scrollable}\n\nFactor objects are how R stores data for categorical variables (fixed numbers of discrete values).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(x = factor(c(\"BS\", \"MS\", \"PhD\", \"MS\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] BS  MS  PhD MS \nLevels: BS MS PhD\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Factor w/ 3 levels \"BS\",\"MS\",\"PhD\": 1 2 3 2\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n:::\n\n\n\n\n## Read data in as character strings\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(cat_lovers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 60\nColumns: 3\n$ name           <chr> \"Bernice Warren\", \"Woodrow Stone\", \"Willie Bass\", \"Tyro…\n$ number_of_cats <dbl> 0, 0, 1, 3, 3, 2, 1, 1, 0, 0, 0, 0, 1, 3, 3, 2, 1, 1, 0…\n$ handedness     <chr> \"left\", \"left\", \"left\", \"left\", \"left\", \"left\", \"left\",…\n```\n:::\n:::\n\n\n\n\n## But coerce when plotting {.scrollable}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cat_lovers, mapping = aes(x = handedness)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](01-intro-to-r_files/figure-revealjs/unnamed-chunk-40-1.png){width=3000}\n:::\n:::\n\n\n\n\n## Use `forcats` to manipulate factors  {.scrollable}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat_lovers <- cat_lovers |>\n  mutate(handedness = fct_relevel(handedness, \n                                  \"right\", \"left\", \"ambidextrous\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cat_lovers, mapping = aes(x = handedness)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](01-intro-to-r_files/figure-revealjs/unnamed-chunk-42-1.png){width=3000}\n:::\n:::\n\n\n\n\n## `forcats` functionality <img src=\"images/01/hex-forcats.png\" width=\"10%\" align=\"left\"/> {.scrollable}\n\n- R uses factors to handle categorical variables, variables that have a fixed and known set of possible values. Historically, factors were much easier to work with than character vectors, so many base R functions automatically convert character vectors to factors.\n\n- factors are still useful when you have true categorical data, and when you want to override the ordering of character vectors to improve display. The goal of the forcats package is to provide a suite of useful tools that solve common problems with factors.\n\n::: aside\nSource: [forcats.tidyverse.org](http://forcats.tidyverse.org/)\n:::\n\n# Recap  {background-color=\"#92A86A\"}\n\n## Recap {.scrollable}\n\n- Always best to think of data as part of a tibble\n    + This plays nicely with the `tidyverse` as well\n    + Rows are observations, columns are variables\n- Be careful about data types / classes\n    + Sometimes `R` makes silly assumptions about your data class \n        + Using `tibble`s help, but it might not solve all issues\n        + Think about your data in context, e.g. 0/1 variable is most likely a `factor`\n    + If a plot/output is not behaving the way you expect, first\n    investigate the data class\n    + If you are absolutely sure of a data class, over-write it in your\n    tibble so that you don't need to keep having to keep track of it\n        + `mutate` the variable with the correct class\n\n- What are atomic vectors?\n- Do I know how to determine the class/type of a variable?\n- Can I define atomic vectors, vectors, and lists?\n- Can I explain dynamic typing?\n- Can I operate on variables and values using... \n  - arithmetic operators? \n  - comparison operators?\n- What is the difference between installing and loading a package?",
    "supporting": [
      "01-intro-to-r_files/figure-revealjs"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/font-awesome-5.1.0/css/all.css\" rel=\"stylesheet\" />\n<link href=\"../../site_libs/font-awesome-5.1.0/css/v4-shims.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.0/htmlwidgets.js\"></script>\n<link href=\"../../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/datatables-binding-0.26/datatables.js\"></script>\n<script src=\"../../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../../site_libs/dt-core-1.12.1/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"../../site_libs/dt-core-1.12.1/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/dt-core-1.12.1/js/jquery.dataTables.min.js\"></script>\n<link href=\"../../site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}