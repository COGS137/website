---
title: "03-tidyr"
author: "Professor Shannon Ellis"
date: "2023-01-19"

format:
  html: 
    output-file: 03-tidyr.html
  revealjs:
    output-file: 03-tidyr-slides.html
    slide-number: true
    chalkboard: false 
    preview-links: auto
    logo: images/cogs137-logo-hex.png
    css: slides.css
    footer: <https://cogs137.github.io/website/>
    scrollable: true
    execute:
     eval: true
     echo: true
     output: true
---

# Tidy Data with `tidyr` {background-color="#92A86A"}

```{r echo=FALSE, message=FALSE, warning=FALSE}
library(tidyverse)
library(emo)
library(DT)

# Set dpi and height for images
knitr::opts_chunk$set(fig.height = 2.65, dpi = 300, echo=TRUE) 
htmltools::tagList(rmarkdown::html_dependency_font_awesome())
```

## Q&A {.smaller}

> Q: The most confusing part for the "transmute" part of the lecture. Does this remove the column from the original dataframe or does it just separate it but it remains in the dataframe\
> A: The original dataframe is *not* changed. It just creates a new dataframe. Nothing in dplyr will change your original dataframe, unless you explicitly assign it back to the same variable name.

> Q: It's a totally new language for me and it's kind of hard to write the function correctly and quickly at first\
> A: That's expected. You're not alone!

> Q: I'm not sure when it would be ideal to use Select vs Transmute, as in today's lecture\
> A: When you want to extract existing columns, `select`! When you want to create a new column in a new dataframe, `transmute`!

> Q: Pulls - when are they necessary?\
> A: `dplyr` pulls are necessary when you have values in a dataframe, but you want them in a typical vector...or you want to pull a single value.

> Q: If we don't finish the notes on a given day, do I have to learn them on my own?\
> A: Nope! We'll pick up there on the next class day.

## Course Announcements {.scrollable .smaller}

**Due Dates**:

-   **Lab 02** due Friday (1/20; 11:59 PM)
-   **HW01** due Monday (1/23; 11:59 PM)
-   Lecture Participation survey "due" after class

**Notes** (1/19):

-   HW01 available - let's try this again
    -   Q2 can delete `expect_true(true_var)` and `expect_false(false_var)` from testing (they should only be in Q3)
-   Staff office hours updated (see Canvas or website)

## Student Survey

-   88% know Python; 20% know R; most (but not all!) have programmed before
-   Reasons for taking course: learn R, add to resume, analyze data, improve data science skills

. . .

What y'all do outside of school:

-   sports: soccer, rugby, vball, basketball, surfing, skating, etc.
-   indoor activities: reading, gaming, cook, crochet, art, write, youtube, tiktok
-   work
-   sleep

. . .

My favorite boring facts:

-   I love cupcakes
-   I like drinking tea
-   I've never had a nosebleed
-   I can sleep for up to 16-17 hours if I forget to set an alarm
-   I don't cook

## Tidy Data

The opinionated `tidyverse` is named as such b/c it assumes/necessitates your data be "tidy".

. . .

> Tidy datasets are all alike, but every messy dataset is messy in its own way. ---- Hadley Wickham

. . .

1.  Each variable must have its own column.
2.  Each observation must have its own row.
3.  Each value must have its own cell.

::: aside
Source: https://r4ds.had.co.nz/tidy-data.html
:::

## Tidy or not? {.scrollable .smaller}

[`r emo::ji("question")` Given the rules discussed, is the `cat_lovers` dataset tidy?]{style="background-color: #ADD8E6"}

```{r}
cat_lovers <- read_csv("https://raw.githubusercontent.com/COGS137/datasets/main/cat-lovers.csv")
cat_lovers |> datatable()
```

. . .

[`r emo::ji("question")` Given the rules discussed, is the `bike` dataset tidy?]{style="background-color: #ADD8E6"}

```{r}
bike <- read_csv2("https://raw.githubusercontent.com/COGS137/datasets/main/nc_bike_crash.csv", 
                  na = c("NA", "", "."))
bike |> datatable()
```

## Summary tables {.scrollable .smaller}

[`r emo::ji("question")` Which is a dataset? Which is a summary table?]{style="background-color: #ADD8E6"}

::: columns
::: {.column width="50%"}
```{r, echo=FALSE}
starwars |>
  select(name, height, mass) |>
  datatable(options = list(dom = "pt", pageLength = 8))
```
:::

::: {.column width="50%"}
```{r, echo=FALSE}
starwars |>
  count(homeworld, gender) |>
  spread(gender, n) |>
  datatable(options = list(dom = "pt", pageLength = 8))
```
:::
:::

## Your Turn

There are four representations of the same data/information provided in the `tidyr` packages: `table1`, `table2`, `table3`, and the combination of `table4a` and `table4b`. Given what we've discussed, which is the best (tidiest) way to represent these data?

::: aside
Put a <font color="#32cb31">green</font> sticky on the front of your computer when you're done. Put a <font color="#ff65a3">pink</font> if you want help/have a question.
:::

## Common issues

-   One variable might be spread across multiple columns.
-   One observation might be scattered across multiple rows.

. . .

Solution: pivoting!

## Pivoting {.scrollable}

::: panel-tabset
### `pivot_longer`

For when some of the column names are not names of variables, but values of a variable...

```{r}
table4a
```

```{r}
table4a |> 
  pivot_longer(c(`1999`, `2000`), names_to = "year", values_to = "cases")
```

[`r emo::ji("question")` Why are there backticks around the years? (Note: we have not discussed this yet)]{style="background-color: #ADD8E6"}

### `pivot_wider`

For when an observation is scattered across multiple rows...

```{r}
table2
```

```{r}
table2 |>
    pivot_wider(names_from = type, values_from = count)
```

[`r emo::ji("question")` Why aren't there quotes around column names here...but there were in `pivot_longer`? (Note: we have not discussed this yet.)]{style="background-color: #ADD8E6"}

### long vs. wide

-   **wide** data contains values that do not repeat in the first column.
-   **long** format contains values that do repeat in the first column.

Both are good/helpful! We'll return to this idea and discuss more during dataviz next week.

Briefly:

-   wide data: analysis
-   long data: plotting
:::

## Separating & Uniting {.scrollable}

::: panel-tabset
### `separate`

For when multiple pieces of information are stored in a single column...

```{r}
table3
```

```{r}
table3 |> 
  separate(rate, into = c("cases", "population"))
```

...but...but...cases and population should be numeric...

```{r}
table3 |> 
  separate(rate, into = c("cases", "population"), convert = TRUE)
```

### `unite`

Unite is the opposite...it combines data stored across multiple columns.

The general syntax is:

```{r, eval=FALSE}
df |>
  unite(new_col, first_col, second_col)
```
:::

## Joins {.scrollable}

If we look at `table4a`, it's missing the population information. That's stored in a separate table...`table4b`

```{r}
table4b
```

...which is also in the "wide" format

. . .

...so we pivot both tables longer

```{r}
tidy4a <- table4a |> 
  pivot_longer(c(`1999`, `2000`), names_to = "year", values_to = "cases")

tidy4b <- table4b |> 
  pivot_longer(c(`1999`, `2000`), names_to = "year", values_to = "population")

tidy4b
```

. . .

...but how do we get them into a single tidy dataset?

. . .

A join!

```{r}
left_join(tidy4a, tidy4b)
```

::: aside
Source: [R4DS](https://r4ds.had.co.nz/relational-data.html)
:::

## The Data: `nycflights13` {.smaller}

```{r}
library(nycflights13)
```

-   `airlines` : links airline to two letter code
-   `airports` : ID'ed by FAA code
-   `planes` : ID'ed by tailnum
-   `airport` : weather each hour; id'ed by two letter airport code

. . .

![Image Source: [https://r4ds.had.co.nz/relational-data.html)](https://r4ds.had.co.nz/relational-data.html)](images/03/relational-nycflights.png)

. . .

-   `flights` connects to `planes` via a single variable, `tailnum`.

-   `flights` connects to `airlines` through the `carrier` variable.

-   `flights` connects to `airports` in two ways: via the `origin` and `dest` variables.

-   `flights` connects to `weather` via `origin` (the location), and `year`, `month`, `day` and `hour` (the time).

## Mutating Joins

**mutating joins** - add new variables to a data frame from matching observations in another

. . .

For simplicity, we'll work with only a handful of columns...

```{r}
flights |> 
  select(year:day, hour, tailnum, carrier) |> 
  left_join(airlines, by = "carrier")
```

There is now a new column `name`...coming from the `airlines` data frame.

. . .

**`left_join`**:

-   keeps all rows in first df (here: `flights`)
-   adds all matching information from second df (here: `airlines`); adds NAs for any observations not in `airlines`

. . .

Other joins:

**`right_join`**: keeps all observations in second df **`full_join`**: keeps all observations in either df

. . .

![Image Source: <https://r4ds.had.co.nz/relational-data.html>](images/03/join-outer.png)

. . .

**`inner_join`**:

-   takes only rows in *both* dfs

![Image Source: <https://r4ds.had.co.nz/relational-data.html>](images/03/join-inner.png)

# Recap {background-color="#92A86A"}

-   Do you understand what constitutes tidy data?
-   Can you identify what needs to be done to take a dataset from untidy to tidy?
-   What is the difference been long data and wide data?
-   Can I take long data to wide data? And wide to long?
-   Can I carry out mutating joins on data?

## Suggested Reading

R4DS:

-   Chapter 12: [Tidy Data](https://r4ds.had.co.nz/tidy-data.html)
-   Chapter 13: [Relational Data](https://r4ds.had.co.nz/relational-data.html)
