---
title: "11-cs01-data"
author: "Professor Shannon Ellis"
date: "2023-02-14"

format:
  html: 
    output-file: 11-cs01-data.html
    embed-resources: true
  revealjs:
    output-file: 11-cs01-data-slides.html
    slide-number: true
    chalkboard: false 
    preview-links: auto
    logo: images/cogs137-logo-hex.png
    css: slides.css
    footer: <https://cogs137.github.io/website/>
    scrollable: true
    embed-resources: true
    execute:
      echo: true
      eval: true
---

# CS01: Right-To-Carry (Data) {background-color="#92A86A"}

## Q&A {.smaller}

> Q: Is there ever a time when we should use $R^2$ instead of adjusted R^2 when analyzing a model?\
> A: When talking about variance explained of a single model, $R^2$ is great, but when comparing across models, you'll always want to use adjusted $R^2$

> Q: How do we use the data from OCS for our case study? Should we merge the data files?\
> A: Excellent question! That's what today's lecture is *all* about. There's a whole lot of wrangling to do before we can use these data!

> Q: Do we need to look at the p-value when we do analysis? (Midterm01)\
> A: When interpreting a model, no. When doing hypothesis testing (we'll get there), it is one piece you can look at. A few people did interpret p-values on the midterm, and that's ok! (But it was not required.)

> Q: Can we have a system where we can find other students to group with? Like a google form? \
> A: Great question! I'll start a pinned thread on Campuswire so you all can find one another.

> Q: I think the data seems pretty confusing. \
> A: That's b/c it is! We've got a lot of work to do to get it into a usable/understandable format.

> Q: In what context of data we should use interaction model or main effect model? \
> A: Interaction terms should be included when the relationship between one predictor and the outcome varies by another predictor.


## Course Announcements

**Due Dates**:

-   **Lab 05** due tomorrow (2/17; 11:59 PM)
-   [mid-course survey](https://docs.google.com/forms/d/e/1FAIpQLSdpvo3bamtS4ClT8tquYaTehuBw16x2lBF-nKOhVkLbLQK4uw/viewform?usp=sf_link) (optional for EC) due tomorrow (2/17; 11:59 PM)
-   Lecture Participation survey "due" after class

. . .

**Notes**
- CS01 
  - instructions posted on website
  - invited to GH repo (accept invitation, please!)
  - have an email with other group mates
  - goal: meet more people in the class & work together
- HW03 posted
- Reminder to think about final project group mates; thread on campuswire

```{r packages, echo = FALSE, message=FALSE, warning=FALSE}
library(tidyverse)
library(tidymodels)
library(patchwork)

# ggplot2 color palette with gray
color_palette <- list(gray = "#999999", 
                      salmon = "#E69F00", 
                      lightblue = "#56B4E9", 
                      green = "#009E73", 
                      yellow = "#F0E442", 
                      darkblue = "#0072B2", 
                      red = "#D55E00", 
                      purple = "#CC79A7")

knitr::opts_chunk$set(fig.height = 3.5, dpi = 300, echo=TRUE, warning=FALSE, message=FALSE) 
```

## Agenda

- Background
- Data Intro
- Wrangle
- Combine!

# Background  {background-color="#92A86A"}

## Right To Carry Laws[^1] {.smaller}

**Right to Carry (RTC) Laws** - "a law that specifies if and how citizens are allowed to have a firearm on their person or nearby (for example, in a citizen’s car) in public."[^2]


[^1]: Case Study Reference: Wright, Carrie and Ontiveros, Michael and Jager, Leah and Taub, Margaret and Hicks, Stephanie. (2020). https://github.com//opencasestudies/ocs-bp-RTC-analysis. Influence of Multicollinearity on Measured Impact of Right-to-Carry Gun Laws (Version v1.0.0).

[^2]: In this discussion, we will use the National Rifle Association (NRA) terminology. Please keep in mind that there are other terms that people use.


## RTC Laws (cont'd) {.smaller}

::: incremental
- The Second Amendment to the United States Constitution guarantees the right to “keep and bear arms”. The amendment was ratified in 1791 as part of the Bill of Rights.
- There are no federal laws about carrying firearms in public.
- These laws are created and enforced at the US state level. States vary greatly in their laws about the right to carry firearms.
-  Some require extensive effort to obtain a permit to legally carry a firearm, while other states require very minimal effort to do so. An increasing number of states do not require permits at all.
:::

## RTC Laws Across the US

![](images/11/rtc-laws.png)


## RTC Laws Across the US

![](images/11/rtc-map.png)


# Questions  {background-color="#92A86A"}

1. What is the relationship between right to carry laws and violence rates in the US?
2. What is the effect of multicollinearity on coefficient estimates from linear regression models when analyzing right to carry laws and violence rates?


# The Data  {background-color="#92A86A"}

## The Data: Source

Two contradictory analyses: 

1. John J. Donohue et al., Right‐to‐Carry Laws and Violent Crime: A Comprehensive Assessment Using Panel Data and a State‐Level Synthetic Control Analysis. Journal of Empirical Legal Studies, 16,2 (2019).

2. David B. Mustard & John Lott. Crime, Deterrence, and Right-to-Carry Concealed Handguns. Coase-Sandor Institute for Law & Economics Working Paper No. 41, (1996).



## The Data {.smaller}

![](images/11/variables-used.png)


## Two Analyses

![](images/11/previous-analyses.png)


## Limitations {.smaller}

::: incremental
1. The analyses differed in variables used; we will not be recreating either analysis in full
2. We'll account for either the adoption or lack of adoption of a permissive right-to-carry law in each state; we will not account for differences in the level of permissiveness of the laws.
3. Race is included here (as it was in initial analysis); however, any association between demographic variables (indicating the proportion of the population from specific race and age groups) and violent crime does not necessarily indicate that the two are linked causally.
:::

## Packages 

```{r packages-load}
library(OCSdata) # will need to be installed
library(tidyverse)
library(pdftools)
library(readxl)
```

## Raw Data

There are a whole bunch of different data files we'll be using...

```{r, eval = FALSE}
# only get the data once
OCSdata::load_raw_data("ocs-bp-RTC-wrangling", outpath = '.')
```

- creates a "data" sub-directory in your current working directory (if it does not already exist)
- creates a "raw" sub-directory within "data"; contains the directories with the data

[`r emo::ji("backhand index pointing right")` **Your Turn**: Load the data into RStudio. It will take a while...so just let it get started.]{style="background-color: #ADD8E6"}

## The Goal

Get two datasets (Lott, Donohue) that contain demographic, population, police staffing, unemployment, violent crime, RTC, and poverty information at the state level across time.

. . .

[`r emo::ji("question")` What would be the tidy way to store these data?]{style="background-color: #ADD8E6"}


## Your Turn

`r emo::ji("brain")` Take a look in one of the data folders, open at least one of the data files to view it, and try to get a sense of the type of information contained within it.

::: aside
Put a <font color="#32cb31">green</font> sticky on the front of your computer when you're done. Put a <font color="#ff65a3">pink</font> if you want help/have a question.
:::


## Demographic & Population Data {.smaller}

::: panel-tabset

### Code 

```{r}
#| code-line-numbers: "|1|3-7|9-13"
dem_77_79 <- read_csv("data/raw/Demographics/Decade_1970/pe-19.csv", skip = 5)

dem_80_89 <- list.files(recursive = TRUE,
                  path = "data/raw/Demographics/Decade_1980",
                  pattern = "*.csv",
                  full.names = TRUE) |> 
  purrr::map(~read_csv(., skip=5))

dem_90_99 <- list.files(recursive = TRUE,
                  path = "data/raw/Demographics/Decade_1990",
                  pattern = "*.txt",
                  full.names = TRUE) |> 
  map(~read_table2(., skip = 14))

dem_00_10 <- list.files(recursive = TRUE,
                  path = "data/raw/Demographics/Decade_2000",
                  pattern = "*.csv",
                   full.names = TRUE) |> 
   map(~read_csv(.))
```

Source: US Census Bureau Data

### Data

```{r}
glimpse(dem_00_10[[1]])
```

:::

## State FIPS Codes

::: panel-tabset

### Image

![](images/11/FIPS.png)

### Code 

```{r}
STATE_FIPS <- readxl::read_xls("data/raw/State_FIPS_codes/state-geocodes-v2014.xls", skip = 5)
```

### Data 

```{r}
glimpse(STATE_FIPS)
```

### Wrangling

```{r}
STATE_FIPS <- STATE_FIPS |>
  rename(STATEFP = `State\n(FIPS)`,
         STATE = Name) |>
  select(STATEFP, STATE) |>
  filter(STATEFP != "00")

STATE_FIPS
```

:::

## Police Staffing Data

::: panel-tabset

### Code

There's an issue currently with the `ps_data` file from OCS, so we'll use this file instead: 

```{r}
ps_data <- read_csv("https://raw.githubusercontent.com/COGS137/datasets/main/pe_1960_2018.csv")
```

### Data

```{r}
glimpse(ps_data)
```
:::

## Unemployment Data

::: panel-tabset

### Image

![unemployment](images/11/unemp.png)


### Code 

```{r, message=FALSE}
#| code-line-numbers: "|1-5|7-13"
ue_rate_data <- list.files(recursive = TRUE,
                          path = "data/raw/Unemployment",
                          pattern = "*.xlsx",
                          full.names = TRUE) |> 
map(~read_xlsx(., skip = 10))

ue_rate_names <- list.files(recursive = TRUE,
                          path = "data/raw/Unemployment",
                          pattern = "*.xlsx",
                          full.names = TRUE) |>
map(~read_xlsx(., range = "B4:B6")) |>
  map(c(1,2)) |>
unlist()

names(ue_rate_data) <- ue_rate_names
```

### Data 
```{r}
head(ue_rate_data)[1]
```

### Wrangle
```{r}
ue_rate_data <- ue_rate_data |>
  map_df(bind_rows, .id = "STATE") |>
  select(STATE, Year, Annual) |>
  rename("YEAR" = Year,
         "VALUE" = Annual) |>
  mutate(VARIABLE = "Unemployment_rate")

ue_rate_data
```

::: 

## Poverty Data

::: panel-tabset

### Code 
```{r, message=FALSE}
poverty_rate_data <- read_xls("data/raw/Poverty/hstpov21.xls", skip=2)
```

### Data
```{r}
head(poverty_rate_data)
```

:::

Source: US Census Bureau Data


## Violent Crime Data

::: panel-tabset

### Code

```{r, message=FALSE}
crime_data <- read_lines("data/raw/Crime/CrimeStatebyState.csv",
                         skip = 2, 
                         skip_empty_rows = TRUE)
```

Due to spaces and `/` in the column names, `read_lines()` from the readr package works better than `read_csv()` 

### Data

```{r}
head(crime_data)
```

:::


## Right-To-Carry Data

::: panel-tabset

### Code 

```{r, message=FALSE}
DAWpaper <- pdf_text("data/raw/w23510.pdf")
```


### Data
```{r}
head(DAWpaper[1])
```
:::

## Save (Imported) Data

```{r, eval=FALSE}
save(dem_77_79, dem_80_89, dem_90_99, dem_00_10, 
     STATE_FIPS, 
     ps_data, 
     ue_rate_data, 
     poverty_rate_data,
     crime_data,
     DAWpaper, file = "data/imported_data_rtc.rda")
```

# Data Wrangling  {background-color="#92A86A"}

## Wrangle: Demo Data {.smaller}

::: panel-tabset

### 77-79
```{r}
#| code-line-numbers: "|1-8|10-13"
dem_77_79 <- dem_77_79 |>
  rename("race_sex" =`Race/Sex Indicator`) |>
  mutate(SEX = str_extract(race_sex, "male|female"),
        RACE = str_extract(race_sex, "Black|White|Other"))|>
  select(-`FIPS State Code`, -`race_sex`) |>
  rename("YEAR" = `Year of Estimate`,
        "STATE" = `State Name`) |>
  filter(YEAR %in% 1977:1979)

dem_77_79 <- dem_77_79 |>
  pivot_longer(cols=contains("years"),
               names_to = "AGE_GROUP",
               values_to = "SUB_POP")

glimpse(dem_77_79)
```

### 80s

```{r}
dem_80_89 <- dem_80_89 |>
  map_df(bind_rows)

dem_80_89 <- dem_80_89 |>
  rename("race_sex" =`Race/Sex Indicator`) |>
  mutate(SEX = str_extract(race_sex, "male|female"),
        RACE = str_extract(race_sex, "Black|White|Other"))|>
  select( -`race_sex`) |>
  rename("YEAR" = `Year of Estimate`) |> 
  rename("STATEFP_temp" = "FIPS State and County Codes") |>
  mutate(STATEFP = str_sub(STATEFP_temp, start = 1, end = 2)) |>
    left_join(STATE_FIPS, by = "STATEFP") |>
  select(-STATEFP)

dem_80_89 <- dem_80_89 |>
  pivot_longer(cols=contains("years"),
               names_to = "AGE_GROUP",
               values_to = "SUB_POP_temp") |>
  group_by(YEAR, STATE, AGE_GROUP, SEX, RACE) |>
  summarize(SUB_POP = sum(SUB_POP_temp), .groups="drop")

dem_80_89
```


### 90s

```{r}
dem_90_99 <- dem_90_99 |>
  map_df(bind_rows)

colnames(dem_90_99) <- c("YEAR", "STATEFP", "Age", "NH_W_M", "NH_W_F", "NH_B_M",
                         "NH_B_F", "NH_AIAN_M", "NH_AIAN_F", "NH_API_M", "NH_API_F",
                         "H_W_M", "H_W_F", "H_B_M", "H_B_F", "H_AIAN_M", "H_AIAN_F",
                         "H_API_M", "H_API_F")

dem_90_99 <- dem_90_99 |>
  drop_na() |>
  mutate(W_M = NH_W_M + H_W_M, W_F = NH_W_F + H_W_F,
         B_M = NH_B_M + H_B_M, B_F = NH_B_F + H_B_F,
         AIAN_M = NH_AIAN_M + H_AIAN_M, AIAN_F = NH_AIAN_F + H_AIAN_F,
         API_M = NH_API_M + H_API_M, API_F = NH_API_F + H_API_F) |>
  select(-starts_with("NH_"), -starts_with("H_"))

dem_90_99 <- dem_90_99 |>
  mutate(AGE_GROUP = cut(Age,
                         breaks = seq(0,90, by=5),
                         right = FALSE, labels = pull(distinct(dem_77_79,AGE_GROUP), AGE_GROUP))) |>
  select(-Age) |>
  pivot_longer(cols = c(starts_with("W_"),
                        starts_with("B_"),
                        starts_with("AIAN_"),
                        starts_with("API_")),
               names_to = "RACE",
               values_to = "SUB_POP_temp") |>
  mutate(SEX = case_when(str_detect(RACE, "_M") ~ "Male",
                         TRUE ~ "Female"),
         RACE = case_when(str_detect(RACE, "W_") ~ "White",
                          str_detect(RACE, "B_") ~ "Black",
                          TRUE ~ "Other"))

dem_90_99 <- dem_90_99 |>
  left_join(STATE_FIPS, by = "STATEFP") |>
  select(-STATEFP) |>
  group_by(YEAR, STATE, AGE_GROUP, SEX, RACE) |>
  summarize(SUB_POP = sum(SUB_POP_temp), .groups="drop")

glimpse(dem_90_99)
```

### 00s

```{r}
dem_00_10 <- dem_00_10 |>
  map_df(bind_rows)

dem_00_10 <- dem_00_10 |>
  select(-ESTIMATESBASE2000,-CENSUS2010POP) |>
  filter(NAME != "United States",
         SEX != 0,
         RACE != 0,
         AGEGRP != 0, 
         ORIGIN == 0) |>
  select(-REGION, -DIVISION, -ORIGIN, -STATE) |>
  rename("STATE" = NAME,
         "AGE_GROUP" = AGEGRP)

dem_00_10 <- dem_00_10 |>
  mutate(SEX = factor(SEX, levels = 1:2, labels = c("Male", "Female")),
         RACE = factor(RACE, levels = 1:6, labels = c("White", "Black", rep("Other",4))),
         AGE_GROUP = factor(AGE_GROUP, levels = 1:18,
                            labels = pull(distinct(dem_77_79,AGE_GROUP), AGE_GROUP)))

dem_00_10 <- dem_00_10 |>
  pivot_longer(cols=contains("ESTIMATE"), names_to = "YEAR", values_to = "SUB_POP_temp") |>
   mutate(YEAR = str_sub(YEAR, start=-4),
          YEAR = as.numeric(YEAR)) |> 
  group_by(YEAR, AGE_GROUP, STATE, SEX, RACE) |>
  summarize(SUB_POP = sum(SUB_POP_temp), .groups = "drop")
                            
glimpse(dem_00_10)
```
:::


## Wrangle: Population Data

::: panel-tabset

### 77-79

```{r}
pop_77_79 <- dem_77_79 |>
  group_by(YEAR, STATE) |>
  summarize(TOT_POP = sum(SUB_POP), .groups = "drop") 

pop_77_79 
```

### 80s

```{r}
pop_80_89 <- dem_80_89 |>
  group_by(YEAR, STATE) |>
  summarize(TOT_POP = sum(SUB_POP), .groups = "drop") 
```

### 90s 

```{r}
pop_90_99 <- dem_90_99 |>
  group_by(YEAR, STATE) |>
  summarize(TOT_POP = sum(SUB_POP), .groups = "drop")
```

### 00s
```{r}
pop_00_10 <- dem_00_10 |>
  group_by(YEAR, STATE) |>
  summarize(TOT_POP = sum(SUB_POP), .groups = "drop")
```

:::


## Combine: Demo + Population

::: panel-tabset

### 77-79

```{r}
dem_77_79 <- dem_77_79 |>
  left_join(pop_77_79, by = c("YEAR", "STATE")) |> 
  mutate(PERC_SUB_POP = (SUB_POP/TOT_POP)*100) |>
  select(-SUB_POP, -TOT_POP) |>
  mutate(SEX = str_to_title(SEX))


dem_77_79
```

### 80s

```{r}
dem_80_89 <- dem_80_89 |>
  left_join(pop_80_89, by = c("YEAR", "STATE")) |>
  mutate(PERC_SUB_POP = (SUB_POP/TOT_POP)*100) |>
  select(-SUB_POP, -TOT_POP) |>
  mutate(SEX = str_to_title(SEX))

```

### 90s

```{r}
dem_90_99 <- dem_90_99 |>
  left_join(pop_90_99, by = c("YEAR", "STATE")) |>
  mutate(PERC_SUB_POP = (SUB_POP/TOT_POP)*100) |>
  select(-SUB_POP, -TOT_POP)

dem_90_99
```

### 00s
```{r}
dem_00_10 <- dem_00_10 |>
  left_join(pop_00_10, by = c("YEAR", "STATE")) |>
  mutate(PERC_SUB_POP = (SUB_POP/TOT_POP)*100) |>
  select(-SUB_POP, -TOT_POP)

dem_00_10
```

### Idea

[`r emo::ji("exclamation")` This would be a good part of the code to write a user-defined function...]{style="background-color: #ADD8E6"}

:::

## Aside: UDF

::: panel-tabset

### The What

- User-defined functions (UDFs) are functions you write to make your code cleaner
- Any time you copy+paste very similar code, think to yourself...I should make this a function!

### The How

The general syntax for a function in R is:

```{r, eval=FALSE}
function_name <- function(parameters){
  # code to carry out
  # using the parameters
}
```

Note: by default the last object created within the function is returned from the function

### Example

```{r}
combine_demo_pop <- function(df_dem, df_pop){
  df_dem <- df_dem |>
  group_by(YEAR, STATE) |>
  summarize(TOT_POP = sum(SUB_POP), .groups = "drop")
  
  df_dem |>
  left_join(df_pop, by = c("YEAR", "STATE")) |>
  mutate(PERC_SUB_POP = (SUB_POP/TOT_POP)*100) |>
  select(-SUB_POP, -TOT_POP) |>
  mutate(SEX = str_to_title(SEX))
}

```

### Using the function

```{r, eval=FALSE}
combined_df <- combine_demo_pop(dem_00_10, pop_00_10)
```

- Note: if you've already combined the data into `dem_00_10`, this would not work.
- Cleaning up/improving code in your case studies is encouraged!

:::

## Combine: Demo/Pop Across Decades

```{r}
dem <- bind_rows(dem_77_79,
                 dem_80_89,
                 dem_90_99,
                 dem_00_10)

glimpse(dem)
```


## Demographic Data (Donohue)

```{r}
#| code-line-numbers: "|1-5|7-26"
DONOHUE_AGE_GROUPS <- c("15 to 19 years",
                        "20 to 24 years",
                        "25 to 29 years",
                        "30 to 34 years",
                        "35 to 39 years")

dem_DONOHUE <- dem |>
  filter(AGE_GROUP %in% DONOHUE_AGE_GROUPS,
               SEX == "Male") |>
  mutate(AGE_GROUP = fct_collapse(AGE_GROUP, "20 to 39 years"=c("20 to 24 years",
                                                                "25 to 29 years",
                                                                "30 to 34 years",
                                                                "35 to 39 years")),
         AGE_GROUP = str_replace_all(string = AGE_GROUP, 
                                     pattern = " ", 
                                     replacement = "_")) |>
  group_by(YEAR, STATE, RACE, SEX, AGE_GROUP) |>
  summarize(PERC_SUB_POP = sum(PERC_SUB_POP), .groups = "drop") |>
  unite(col = "VARIABLE", RACE, SEX, AGE_GROUP, sep = "_") |>
  rename("VALUE" = PERC_SUB_POP)

dem_DONOHUE
```


## Demographic Data (Lott)

```{r}
LOTT_AGE_GROUPS_NULL <- c("Under 5 years",
                          "5 to 9 years")

dem_LOTT <- dem |>
  filter(!(AGE_GROUP %in% LOTT_AGE_GROUPS_NULL) )|>
  mutate(AGE_GROUP = fct_collapse(AGE_GROUP,
                                  "10 to 19 years"=c("10 to 14 years", "15 to 19 years"),
                                  "20 to 29 years"=c("20 to 24 years", "25 to 29 years"),
                                  "30 to 39 years"=c("30 to 34 years", "35 to 39 years"),
                                  "40 to 49 years"=c("40 to 44 years", "45 to 49 years"),
                                  "50 to 64 years"=c("50 to 54 years", "55 to 59 years",
                                                     "60 to 64 years"),
                                  "65 years and over"=c("65 to 69 years", "70 to 74 years", 
                                                        "75 to 79 years", "80 to 84 years",
                                                        "85 years and over")),
         AGE_GROUP = str_replace_all(AGE_GROUP, " ", "_")) |>
  group_by(YEAR, STATE, RACE, SEX, AGE_GROUP) |>
  summarize(PERC_SUB_POP = sum(PERC_SUB_POP), .groups = "drop") |>
  unite(col = "VARIABLE", RACE, SEX, AGE_GROUP, sep = "_") |>
  rename("VALUE" = PERC_SUB_POP)

glimpse(dem_LOTT)
```


## Combine: Population Data

```{r}
population_data <- bind_rows(pop_77_79,
                             pop_80_89,
                             pop_90_99,
                             pop_00_10)

population_data <- population_data |>
  mutate(VARIABLE = "Population") |>
  rename("VALUE" = TOT_POP)

```


## Wrangling: Police staffing

```{r}
# the provided dataset has already had a bit of wrangling done for you
ps_data
```

. . .

### remove territories

```{r}
state_of_interest_NULL <- c("AS", "GM", "CZ", "FS", "MP", "OT", "PR", "VI")

ps_data <- ps_data |>
  filter(!(state_abbr %in% state_of_interest_NULL)) 
```

. . .

### Use `state` abbreviations

```{r}
#| code-line-numbers: "|1-6|7-13"
state_abb_data <- tibble("state_abbr" = state.abb, "STATE" = state.name)
state_abb_data <- state_abb_data |>
  mutate(state_abbr = str_replace(string = state_abbr, 
                                  pattern = "NE", 
                                  replacement = "NB")) |>
  add_row(state_abbr = "DC", STATE = "District of Columbia")

ps_data <- ps_data |> 
  left_join(state_abb_data, by = "state_abbr") |>
  select(-state_abbr) |> 
  rename(YEAR = "data_year",
         VALUE = "officer_state_total") |>
  mutate(VARIABLE = "officer_state_total")

ps_data
```

. . .

### Scaling

```{r}
denominator_temp <- population_data |> 
  select(-VARIABLE) |>
  rename("Population_temp"=VALUE) 

ps_data <- ps_data |> 
  left_join(denominator_temp, by=c("STATE","YEAR")) |>
  mutate(VALUE = (VALUE * 100000) / Population_temp) |>
  mutate(VARIABLE = "police_per_100k_lag") |>
  select(-Population_temp)

head(ps_data)
```

## Wrangling: Poverty Rate

```{r, echo=FALSE}
head(poverty_rate_data, 5)
```

. . .

```{r}
#| code-line-numbers: "|1-2|3-9|11-14|16-19|21-29"
colnames(poverty_rate_data) <- c("STATE", "Total", "Number", "Number_se",
                                 "Percent", "Percent_se")

poverty_rate_data <- poverty_rate_data |>
  filter(STATE != "STATE") |> 
  mutate(length_state = map_dbl(STATE, str_length)) |> # determine how long string in "STATE" column is
  filter(length_state < 100) |> # filter to only include possible state lengths
  mutate(STATE = str_replace(STATE, pattern = "D.C.", 
                              replacement = "District of Columbia" )) 

year_values <- poverty_rate_data |>
  filter(str_detect(STATE, "[:digit:]")) |>
  distinct(STATE)
year_values <- rep(pull(year_values, STATE), each = 52) # repeat values from STATE column 52 times each

poverty_rate_data <- poverty_rate_data |>
  mutate(year_value = year_values) |>
  select(-length_state) |>
  filter(str_detect(STATE, "[:alpha:]"))

poverty_rate_data <- poverty_rate_data |>
  filter(year_value != "2017") |> 
  filter(year_value != "2013 (18)") |>
  mutate(YEAR = str_sub(year_value, start = 1, end = 4)) |>
  select(-c(Number, Number_se, Percent_se, Total, year_value)) |>
  rename("VALUE" = Percent) |>
  mutate(VARIABLE = "Poverty_rate",
         YEAR = as.numeric(YEAR),
         VALUE = as.numeric(VALUE))

poverty_rate_data
```

## Wrangling: Crime Data

```{r}
crime_data <- crime_data[-((str_which(crime_data, "The figures shown in this column for the offense of rape were estimated using the legacy UCR definition of rape")-1): length(crime_data)+1)]

n_rows <- 2014-1977+1 # determine how many rows there are for each state
rep_cycle <- 4 + n_rows
rep_cycle_cut <- 2 + n_rows
colnames_crime <- (crime_data[4])

# specify which rows are to be deleted based on the file format
delete_rows <- c(seq(from = 2, 
                       to = length(crime_data),  
                       by = rep_cycle),
                 seq(from = 3, 
                       to = length(crime_data),
                       by = rep_cycle), 
                 seq(from = 4,
                       to = length(crime_data),
                       by = rep_cycle))
sort(delete_rows) # which rows are to be deleted

# convince yourself you did it right
# should these rows be deleted?
crime_data[44:46]

crime_data <- crime_data[-delete_rows]

# extract state labels from data
state_labels <- crime_data[str_which(crime_data, "Estimated crime in ")]
state_labels <- str_remove(state_labels, pattern = "Estimated crime in ")
state_label_order <- rep(state_labels, each = n_rows) # repeat n_rows times

crime_data <- crime_data[-str_which(crime_data, "Estimated crime")]
crime_data_sep <- read_csv(I(crime_data), col_names = FALSE) |> 
  select(-X6) # remove random extra-comma column

# get column names for later
colnames(crime_data_sep) <- c("Year", 
                              "Population", 
                              "Violent_crime_total",
                              "Murder_and_nonnegligent_Manslaughter",
                              "Legacy_rape",
                              "Revised_rape", 
                              "Robbery",
                              "Aggravated_assault")
# add column names in
crime_data_sep <- bind_cols(STATE = state_label_order, crime_data_sep)

crime_data <- crime_data_sep |>
  mutate(VARIABLE = "Viol_crime_count") |>
  rename("VALUE" = Violent_crime_total) |>
  rename("YEAR" = Year) |>
  select(YEAR,STATE, VARIABLE, VALUE)

crime_data
```

## Wrangling: RTC Laws

```{r}
DAWpaper_p_62 <- DAWpaper[[62]]
str(DAWpaper_p_62, nchar.max = 1000) # see data

p_62 <- DAWpaper_p_62 |>
  str_split("\n") |>
  unlist() |>
  as_tibble() |>
  slice(-(1:2)) |> 
  rename(RTC = value) |>
  slice(-c(53:54)) |>  # physical page 60 marking; empty line removal
  mutate(RTC = str_replace_all(RTC, "\\s{40,}", "|N/A|"),
         RTC = str_trim(RTC, side = "left"),
         RTC = str_replace_all(RTC, "\\s{2,15}", "|"))

head(p_62)

p_62 <- pull(p_62, RTC) |>
  str_split( "\\|{1,}")  # split data on "|" symbol

# get the tibble!
p_62 <- as_tibble(do.call(rbind, p_62)) # rbind and not bind_cols here b/c we have no column names yet

colnames(p_62) <- c("STATE",
                    "E_Date_RTC",
                    "Frac_Yr_Eff_Yr_Pass",
                    "RTC_Date_SA")

p_62 <- p_62 |>
  slice(-c(1, 53:nrow(p_62))) # remove unnecessary rows

RTC <- p_62 |> 
  select(STATE, RTC_Date_SA) |>
  rename(RTC_LAW_YEAR = RTC_Date_SA) |>
  mutate(RTC_LAW_YEAR = as.numeric(RTC_LAW_YEAR)) |>
  mutate(RTC_LAW_YEAR = case_when(RTC_LAW_YEAR == 0 ~ Inf,
                                  TRUE ~ RTC_LAW_YEAR))

```


## Wrangling: Combining! (Donohue)

```{r}
# combine after all that wrangling!
DONOHUE_DF <- bind_rows(dem_DONOHUE,
                        ue_rate_data,
                        poverty_rate_data,
                        crime_data,
                        population_data,
                        ps_data)
DONOHUE_DF

# to wide format!
DONOHUE_DF <- DONOHUE_DF |>
  pivot_wider(names_from = "VARIABLE",
              values_from = "VALUE")

# add in RTC data!
DONOHUE_DF <- DONOHUE_DF |>
  left_join(RTC , by = c("STATE")) |>
  mutate(RTC_LAW = case_when(YEAR >= RTC_LAW_YEAR ~ TRUE,
                              TRUE ~ FALSE)) |>
 drop_na() # drop rows with missing information

# filter to only data where RTC laws were adopted between 1980-2010
# have crime data pre- and post-adoption this way
baseline_year <- min(DONOHUE_DF$YEAR)
censoring_year <- max(DONOHUE_DF$YEAR)

DONOHUE_DF <- DONOHUE_DF |>
  mutate(TIME_0 = baseline_year,
         TIME_INF = censoring_year) |>
  filter(RTC_LAW_YEAR > TIME_0)

# calculate violent crime rate; put population/crime on log scale
DONOHUE_DF <- DONOHUE_DF |>
  mutate(Viol_crime_rate_1k = (Viol_crime_count*1000)/Population,
         Viol_crime_rate_1k_log = log(Viol_crime_rate_1k),
         Population_log = log(Population))

DONOHUE_DF |>
  slice_sample(n = 10) |>
  glimpse()
```


## Wrangling: Combining! (Lott)

```{r}
LOTT_DF <- bind_rows(dem_LOTT,
                     ue_rate_data,
                     poverty_rate_data,
                     crime_data,
                     population_data,
                     ps_data) |>
  pivot_wider(names_from = "VARIABLE",
              values_from = "VALUE") |>
  left_join(RTC , by = c("STATE")) |>
  mutate(RTC_LAW = case_when(YEAR >= RTC_LAW_YEAR ~ TRUE,
                              TRUE ~ FALSE)) |>
   drop_na()

baseline_year <- min(LOTT_DF$YEAR)
censoring_year <- max(LOTT_DF$YEAR)

LOTT_DF <- LOTT_DF |>
  mutate(TIME_0 = baseline_year,
         TIME_INF = censoring_year) |>
  filter(RTC_LAW_YEAR > TIME_0)

LOTT_DF <- LOTT_DF |>
  mutate(Viol_crime_rate_1k = (Viol_crime_count*1000)/Population,
         Viol_crime_rate_1k_log = log(Viol_crime_rate_1k),
         Population_log = log(Population))

LOTT_DF
```


## Why?

[`r emo::ji("question")` Why are there different dimensions for LOTT vs DONOHUE??]{style="background-color: #ADD8E6"}

```{r}
dim(LOTT_DF)
```

```{r}
dim(DONOHUE_DF)
```

## Things to Consider

- How RMarkdown documents work
- How to control what is executed each time you render

## Save 

```{r}
save(LOTT_DF, DONOHUE_DF, file = "data/wrangled/wrangled_data_rtc.rda")
```